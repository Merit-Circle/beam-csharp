/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Beam.Client;
using Beam.Model;

namespace Beam.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating an account
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAccountResponse</returns>
        CreateAccountResponse CreateAcount(CreateAccountRequestInput createAccountRequestInput, int operationIndex = 0);

        /// <summary>
        /// Creating an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAccountResponse</returns>
        ApiResponse<CreateAccountResponse> CreateAcountWithHttpInfo(CreateAccountRequestInput createAccountRequestInput, int operationIndex = 0);
        /// <summary>
        /// Creates a transfer request to transfer custodial wallet ownership to an external wallet
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="createTransferOwnershipRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTransferOwnershipRequestResponse</returns>
        CreateTransferOwnershipRequestResponse CreateTransferRequest(Object accountId, CreateTransferOwnershipRequestInput createTransferOwnershipRequestInput, int operationIndex = 0);

        /// <summary>
        /// Creates a transfer request to transfer custodial wallet ownership to an external wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="createTransferOwnershipRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTransferOwnershipRequestResponse</returns>
        ApiResponse<CreateTransferOwnershipRequestResponse> CreateTransferRequestWithHttpInfo(Object accountId, CreateTransferOwnershipRequestInput createTransferOwnershipRequestInput, int operationIndex = 0);
        /// <summary>
        /// Getting information about authenticated player
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountResponse</returns>
        GetAccountResponse GetAccountById(string accountId, int operationIndex = 0);

        /// <summary>
        /// Getting information about authenticated player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountResponse</returns>
        ApiResponse<GetAccountResponse> GetAccountByIdWithHttpInfo(string accountId, int operationIndex = 0);
        /// <summary>
        /// Getting all accounts
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllAccountsResponse</returns>
        GetAllAccountsResponse GetAllAccounts(int operationIndex = 0);

        /// <summary>
        /// Getting all accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllAccountsResponse</returns>
        ApiResponse<GetAllAccountsResponse> GetAllAccountsWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creating an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAccountResponse</returns>
        System.Threading.Tasks.Task<CreateAccountResponse> CreateAcountAsync(CreateAccountRequestInput createAccountRequestInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creating an account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateAccountResponse>> CreateAcountWithHttpInfoAsync(CreateAccountRequestInput createAccountRequestInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a transfer request to transfer custodial wallet ownership to an external wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="createTransferOwnershipRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTransferOwnershipRequestResponse</returns>
        System.Threading.Tasks.Task<CreateTransferOwnershipRequestResponse> CreateTransferRequestAsync(Object accountId, CreateTransferOwnershipRequestInput createTransferOwnershipRequestInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a transfer request to transfer custodial wallet ownership to an external wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="createTransferOwnershipRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTransferOwnershipRequestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTransferOwnershipRequestResponse>> CreateTransferRequestWithHttpInfoAsync(Object accountId, CreateTransferOwnershipRequestInput createTransferOwnershipRequestInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getting information about authenticated player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountResponse</returns>
        System.Threading.Tasks.Task<GetAccountResponse> GetAccountByIdAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getting information about authenticated player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAccountResponse>> GetAccountByIdWithHttpInfoAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getting all accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllAccountsResponse</returns>
        System.Threading.Tasks.Task<GetAllAccountsResponse> GetAllAccountsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getting all accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllAccountsResponse>> GetAllAccountsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IAccountsApiSync, IAccountsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private Beam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(string basePath)
        {
            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Beam.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountsApi(Beam.Client.ISynchronousClient client, Beam.Client.IAsynchronousClient asyncClient, Beam.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Beam.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Beam.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Beam.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Beam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creating an account 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateAccountResponse</returns>
        public CreateAccountResponse CreateAcount(CreateAccountRequestInput createAccountRequestInput, int operationIndex = 0)
        {
            Beam.Client.ApiResponse<CreateAccountResponse> localVarResponse = CreateAcountWithHttpInfo(createAccountRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an account 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateAccountResponse</returns>
        public Beam.Client.ApiResponse<CreateAccountResponse> CreateAcountWithHttpInfo(CreateAccountRequestInput createAccountRequestInput, int operationIndex = 0)
        {
            // verify the required parameter 'createAccountRequestInput' is set
            if (createAccountRequestInput == null)
            {
                throw new Beam.Client.ApiException(400, "Missing required parameter 'createAccountRequestInput' when calling AccountsApi->CreateAcount");
            }

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAccountRequestInput;

            localVarRequestOptions.Operation = "AccountsApi.CreateAcount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateAccountResponse>("/v1/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAcount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating an account 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateAccountResponse</returns>
        public async System.Threading.Tasks.Task<CreateAccountResponse> CreateAcountAsync(CreateAccountRequestInput createAccountRequestInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<CreateAccountResponse> localVarResponse = await CreateAcountWithHttpInfoAsync(createAccountRequestInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creating an account 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<CreateAccountResponse>> CreateAcountWithHttpInfoAsync(CreateAccountRequestInput createAccountRequestInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createAccountRequestInput' is set
            if (createAccountRequestInput == null)
            {
                throw new Beam.Client.ApiException(400, "Missing required parameter 'createAccountRequestInput' when calling AccountsApi->CreateAcount");
            }


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAccountRequestInput;

            localVarRequestOptions.Operation = "AccountsApi.CreateAcount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateAccountResponse>("/v1/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAcount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a transfer request to transfer custodial wallet ownership to an external wallet 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="createTransferOwnershipRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTransferOwnershipRequestResponse</returns>
        public CreateTransferOwnershipRequestResponse CreateTransferRequest(Object accountId, CreateTransferOwnershipRequestInput createTransferOwnershipRequestInput, int operationIndex = 0)
        {
            Beam.Client.ApiResponse<CreateTransferOwnershipRequestResponse> localVarResponse = CreateTransferRequestWithHttpInfo(accountId, createTransferOwnershipRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a transfer request to transfer custodial wallet ownership to an external wallet 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="createTransferOwnershipRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTransferOwnershipRequestResponse</returns>
        public Beam.Client.ApiResponse<CreateTransferOwnershipRequestResponse> CreateTransferRequestWithHttpInfo(Object accountId, CreateTransferOwnershipRequestInput createTransferOwnershipRequestInput, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Beam.Client.ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->CreateTransferRequest");
            }

            // verify the required parameter 'createTransferOwnershipRequestInput' is set
            if (createTransferOwnershipRequestInput == null)
            {
                throw new Beam.Client.ApiException(400, "Missing required parameter 'createTransferOwnershipRequestInput' when calling AccountsApi->CreateTransferRequest");
            }

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Beam.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = createTransferOwnershipRequestInput;

            localVarRequestOptions.Operation = "AccountsApi.CreateTransferRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTransferOwnershipRequestResponse>("/v1/accounts/{accountId}/create-transfer-request", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransferRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a transfer request to transfer custodial wallet ownership to an external wallet 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="createTransferOwnershipRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTransferOwnershipRequestResponse</returns>
        public async System.Threading.Tasks.Task<CreateTransferOwnershipRequestResponse> CreateTransferRequestAsync(Object accountId, CreateTransferOwnershipRequestInput createTransferOwnershipRequestInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<CreateTransferOwnershipRequestResponse> localVarResponse = await CreateTransferRequestWithHttpInfoAsync(accountId, createTransferOwnershipRequestInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a transfer request to transfer custodial wallet ownership to an external wallet 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="createTransferOwnershipRequestInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTransferOwnershipRequestResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<CreateTransferOwnershipRequestResponse>> CreateTransferRequestWithHttpInfoAsync(Object accountId, CreateTransferOwnershipRequestInput createTransferOwnershipRequestInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Beam.Client.ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->CreateTransferRequest");
            }

            // verify the required parameter 'createTransferOwnershipRequestInput' is set
            if (createTransferOwnershipRequestInput == null)
            {
                throw new Beam.Client.ApiException(400, "Missing required parameter 'createTransferOwnershipRequestInput' when calling AccountsApi->CreateTransferRequest");
            }


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Beam.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = createTransferOwnershipRequestInput;

            localVarRequestOptions.Operation = "AccountsApi.CreateTransferRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTransferOwnershipRequestResponse>("/v1/accounts/{accountId}/create-transfer-request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransferRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting information about authenticated player 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountResponse</returns>
        public GetAccountResponse GetAccountById(string accountId, int operationIndex = 0)
        {
            Beam.Client.ApiResponse<GetAccountResponse> localVarResponse = GetAccountByIdWithHttpInfo(accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting information about authenticated player 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountResponse</returns>
        public Beam.Client.ApiResponse<GetAccountResponse> GetAccountByIdWithHttpInfo(string accountId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Beam.Client.ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->GetAccountById");
            }

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Beam.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "AccountsApi.GetAccountById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAccountResponse>("/v1/accounts/{accountId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting information about authenticated player 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountResponse</returns>
        public async System.Threading.Tasks.Task<GetAccountResponse> GetAccountByIdAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAccountResponse> localVarResponse = await GetAccountByIdWithHttpInfoAsync(accountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting information about authenticated player 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAccountResponse>> GetAccountByIdWithHttpInfoAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Beam.Client.ApiException(400, "Missing required parameter 'accountId' when calling AccountsApi->GetAccountById");
            }


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Beam.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "AccountsApi.GetAccountById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAccountResponse>("/v1/accounts/{accountId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all accounts 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllAccountsResponse</returns>
        public GetAllAccountsResponse GetAllAccounts(int operationIndex = 0)
        {
            Beam.Client.ApiResponse<GetAllAccountsResponse> localVarResponse = GetAllAccountsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all accounts 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllAccountsResponse</returns>
        public Beam.Client.ApiResponse<GetAllAccountsResponse> GetAllAccountsWithHttpInfo(int operationIndex = 0)
        {
            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountsApi.GetAllAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllAccountsResponse>("/v1/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all accounts 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllAccountsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllAccountsResponse> GetAllAccountsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAllAccountsResponse> localVarResponse = await GetAllAccountsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all accounts 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAllAccountsResponse>> GetAllAccountsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountsApi.GetAllAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllAccountsResponse>("/v1/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
