/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// CreateTransactionResponseNextActionPayload
    /// </summary>
    [DataContract(Name = "CreateTransactionResponse_nextAction_payload")]
    public partial class CreateTransactionResponseNextActionPayload : IEquatable<CreateTransactionResponseNextActionPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionResponseNextActionPayload" /> class.
        /// </summary>
        /// <param name="userOp">userOp.</param>
        /// <param name="userOpHash">userOpHash.</param>
        public CreateTransactionResponseNextActionPayload(Object userOp = default(Object), string userOpHash = default(string))
        {
            this.UserOp = userOp;
            this.UserOpHash = userOpHash;
        }

        /// <summary>
        /// Gets or Sets UserOp
        /// </summary>
        [DataMember(Name = "userOp", EmitDefaultValue = true)]
        public Object UserOp { get; set; }

        /// <summary>
        /// Gets or Sets UserOpHash
        /// </summary>
        [DataMember(Name = "userOpHash", EmitDefaultValue = false)]
        public string UserOpHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransactionResponseNextActionPayload {\n");
            sb.Append("  UserOp: ").Append(UserOp).Append("\n");
            sb.Append("  UserOpHash: ").Append(UserOpHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTransactionResponseNextActionPayload);
        }

        /// <summary>
        /// Returns true if CreateTransactionResponseNextActionPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTransactionResponseNextActionPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransactionResponseNextActionPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserOp == input.UserOp ||
                    (this.UserOp != null &&
                    this.UserOp.Equals(input.UserOp))
                ) && 
                (
                    this.UserOpHash == input.UserOpHash ||
                    (this.UserOpHash != null &&
                    this.UserOpHash.Equals(input.UserOpHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserOp != null)
                {
                    hashCode = (hashCode * 59) + this.UserOp.GetHashCode();
                }
                if (this.UserOpHash != null)
                {
                    hashCode = (hashCode * 59) + this.UserOpHash.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
