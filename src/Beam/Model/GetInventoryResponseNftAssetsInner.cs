/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// GetInventoryResponseNftAssetsInner
    /// </summary>
    [DataContract(Name = "GetInventoryResponse_nftAssets_inner")]
    public partial class GetInventoryResponseNftAssetsInner : IEquatable<GetInventoryResponseNftAssetsInner>, IValidatableObject
    {
        /// <summary>
        /// Defines AssetType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetTypeEnum
        {
            /// <summary>
            /// Enum NUMBER1 for value: NUMBER_1
            /// </summary>
            [EnumMember(Value = "NUMBER_1")]
            NUMBER1 = 1,

            /// <summary>
            /// Enum NUMBER2 for value: NUMBER_2
            /// </summary>
            [EnumMember(Value = "NUMBER_2")]
            NUMBER2 = 2,

            /// <summary>
            /// Enum NUMBER3 for value: NUMBER_3
            /// </summary>
            [EnumMember(Value = "NUMBER_3")]
            NUMBER3 = 3,

            /// <summary>
            /// Enum NUMBER4 for value: NUMBER_4
            /// </summary>
            [EnumMember(Value = "NUMBER_4")]
            NUMBER4 = 4,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 5,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 6,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 7,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 8
        }


        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        [DataMember(Name = "assetType", IsRequired = true, EmitDefaultValue = true)]
        public AssetTypeEnum AssetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInventoryResponseNftAssetsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetInventoryResponseNftAssetsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInventoryResponseNftAssetsInner" /> class.
        /// </summary>
        /// <param name="assetType">assetType (required).</param>
        /// <param name="address">address.</param>
        /// <param name="tokenId">tokenId.</param>
        /// <param name="amount">amount.</param>
        public GetInventoryResponseNftAssetsInner(AssetTypeEnum assetType = default(AssetTypeEnum), string address = default(string), decimal tokenId = default(decimal), string amount = default(string))
        {
            this.AssetType = assetType;
            this.Address = address;
            this.TokenId = tokenId;
            this.Amount = amount;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [DataMember(Name = "tokenId", EmitDefaultValue = false)]
        public decimal TokenId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetInventoryResponseNftAssetsInner {\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetInventoryResponseNftAssetsInner);
        }

        /// <summary>
        /// Returns true if GetInventoryResponseNftAssetsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetInventoryResponseNftAssetsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetInventoryResponseNftAssetsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssetType == input.AssetType ||
                    this.AssetType.Equals(input.AssetType)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    this.TokenId.Equals(input.TokenId)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AssetType.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
