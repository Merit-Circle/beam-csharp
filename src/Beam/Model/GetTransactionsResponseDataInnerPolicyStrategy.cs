/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// GetTransactionsResponseDataInnerPolicyStrategy
    /// </summary>
    [DataContract(Name = "GetTransactionsResponse_data_inner_policy_strategy")]
    public partial class GetTransactionsResponseDataInnerPolicyStrategy : IEquatable<GetTransactionsResponseDataInnerPolicyStrategy>, IValidatableObject
    {
        /// <summary>
        /// Defines SponsorSchema
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SponsorSchemaEnum
        {
            /// <summary>
            /// Enum PayForUser for value: pay_for_user
            /// </summary>
            [EnumMember(Value = "pay_for_user")]
            PayForUser = 1,

            /// <summary>
            /// Enum ChargeCustomTokens for value: charge_custom_tokens
            /// </summary>
            [EnumMember(Value = "charge_custom_tokens")]
            ChargeCustomTokens = 2
        }


        /// <summary>
        /// Gets or Sets SponsorSchema
        /// </summary>
        [DataMember(Name = "sponsorSchema", IsRequired = true, EmitDefaultValue = true)]
        public SponsorSchemaEnum SponsorSchema { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionsResponseDataInnerPolicyStrategy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetTransactionsResponseDataInnerPolicyStrategy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionsResponseDataInnerPolicyStrategy" /> class.
        /// </summary>
        /// <param name="sponsorSchema">sponsorSchema (required).</param>
        /// <param name="tokenContract">tokenContract.</param>
        /// <param name="tokenContractAmount">tokenContractAmount.</param>
        public GetTransactionsResponseDataInnerPolicyStrategy(SponsorSchemaEnum sponsorSchema = default(SponsorSchemaEnum), string tokenContract = default(string), string tokenContractAmount = default(string))
        {
            this.SponsorSchema = sponsorSchema;
            this.TokenContract = tokenContract;
            this.TokenContractAmount = tokenContractAmount;
        }

        /// <summary>
        /// Gets or Sets TokenContract
        /// </summary>
        [DataMember(Name = "tokenContract", EmitDefaultValue = false)]
        public string TokenContract { get; set; }

        /// <summary>
        /// Gets or Sets TokenContractAmount
        /// </summary>
        [DataMember(Name = "tokenContractAmount", EmitDefaultValue = false)]
        public string TokenContractAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTransactionsResponseDataInnerPolicyStrategy {\n");
            sb.Append("  SponsorSchema: ").Append(SponsorSchema).Append("\n");
            sb.Append("  TokenContract: ").Append(TokenContract).Append("\n");
            sb.Append("  TokenContractAmount: ").Append(TokenContractAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTransactionsResponseDataInnerPolicyStrategy);
        }

        /// <summary>
        /// Returns true if GetTransactionsResponseDataInnerPolicyStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTransactionsResponseDataInnerPolicyStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTransactionsResponseDataInnerPolicyStrategy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SponsorSchema == input.SponsorSchema ||
                    this.SponsorSchema.Equals(input.SponsorSchema)
                ) && 
                (
                    this.TokenContract == input.TokenContract ||
                    (this.TokenContract != null &&
                    this.TokenContract.Equals(input.TokenContract))
                ) && 
                (
                    this.TokenContractAmount == input.TokenContractAmount ||
                    (this.TokenContractAmount != null &&
                    this.TokenContractAmount.Equals(input.TokenContractAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SponsorSchema.GetHashCode();
                if (this.TokenContract != null)
                {
                    hashCode = (hashCode * 59) + this.TokenContract.GetHashCode();
                }
                if (this.TokenContractAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TokenContractAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
