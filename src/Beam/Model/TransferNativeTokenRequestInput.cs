/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Beam.Client.FileParameter;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// TransferNativeTokenRequestInput
    /// </summary>
    [DataContract(Name = "TransferNativeTokenRequestInput")]
    public partial class TransferNativeTokenRequestInput : IEquatable<TransferNativeTokenRequestInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferNativeTokenRequestInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferNativeTokenRequestInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferNativeTokenRequestInput" /> class.
        /// </summary>
        /// <param name="receiverProfileId">receiverProfileId (required).</param>
        /// <param name="amountToTransfer">amountToTransfer (required).</param>
        /// <param name="optimistic">optimistic (default to false).</param>
        /// <param name="sponsor">sponsor (default to true).</param>
        public TransferNativeTokenRequestInput(string receiverProfileId = default(string), string amountToTransfer = default(string), bool optimistic = false, bool sponsor = true)
        {
            // to ensure "receiverProfileId" is required (not null)
            if (receiverProfileId == null)
            {
                throw new ArgumentNullException("receiverProfileId is a required property for TransferNativeTokenRequestInput and cannot be null");
            }
            this.ReceiverProfileId = receiverProfileId;
            // to ensure "amountToTransfer" is required (not null)
            if (amountToTransfer == null)
            {
                throw new ArgumentNullException("amountToTransfer is a required property for TransferNativeTokenRequestInput and cannot be null");
            }
            this.AmountToTransfer = amountToTransfer;
            this.Optimistic = optimistic;
            this.Sponsor = sponsor;
        }

        /// <summary>
        /// Gets or Sets ReceiverProfileId
        /// </summary>
        [DataMember(Name = "receiverProfileId", IsRequired = true, EmitDefaultValue = true)]
        public string ReceiverProfileId { get; set; }

        /// <summary>
        /// Gets or Sets AmountToTransfer
        /// </summary>
        [DataMember(Name = "amountToTransfer", IsRequired = true, EmitDefaultValue = true)]
        public string AmountToTransfer { get; set; }

        /// <summary>
        /// Gets or Sets Optimistic
        /// </summary>
        [DataMember(Name = "optimistic", EmitDefaultValue = true)]
        public bool Optimistic { get; set; }

        /// <summary>
        /// Gets or Sets Sponsor
        /// </summary>
        [DataMember(Name = "sponsor", EmitDefaultValue = true)]
        public bool Sponsor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferNativeTokenRequestInput {\n");
            sb.Append("  ReceiverProfileId: ").Append(ReceiverProfileId).Append("\n");
            sb.Append("  AmountToTransfer: ").Append(AmountToTransfer).Append("\n");
            sb.Append("  Optimistic: ").Append(Optimistic).Append("\n");
            sb.Append("  Sponsor: ").Append(Sponsor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferNativeTokenRequestInput);
        }

        /// <summary>
        /// Returns true if TransferNativeTokenRequestInput instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferNativeTokenRequestInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferNativeTokenRequestInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ReceiverProfileId == input.ReceiverProfileId ||
                    (this.ReceiverProfileId != null &&
                    this.ReceiverProfileId.Equals(input.ReceiverProfileId))
                ) && 
                (
                    this.AmountToTransfer == input.AmountToTransfer ||
                    (this.AmountToTransfer != null &&
                    this.AmountToTransfer.Equals(input.AmountToTransfer))
                ) && 
                (
                    this.Optimistic == input.Optimistic ||
                    this.Optimistic.Equals(input.Optimistic)
                ) && 
                (
                    this.Sponsor == input.Sponsor ||
                    this.Sponsor.Equals(input.Sponsor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReceiverProfileId != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiverProfileId.GetHashCode();
                }
                if (this.AmountToTransfer != null)
                {
                    hashCode = (hashCode * 59) + this.AmountToTransfer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Optimistic.GetHashCode();
                hashCode = (hashCode * 59) + this.Sponsor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
